# in : opengl_preprocess.h
# out: c_copengl.pxd, copengl.pyx

import traceback

IN_FILE = "src/opengl_preprocess.h"

cdef_modulename = "c_copengl" # note that you still have to change this manually in a couple of places in this file.
pyrex_filename = "copengl.pyx"
handmadewrappers_filename = "src/handmadewrappers.pyx" # some functions that are not autogenerated wrapped by hand

handmadewrappers_functionlist = [] # filled below from the file "handmadewrappers.pyx"


use_opengl_error_checking = True # inserts "if _ERROR_CHECKING: _CheckError()" statements to every opengl function


def get_pyrex_parameters(line):
    """
    input: GLAPI void GLAPIENTRY glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
    output: ("void", "glTexSubImage1D",
             ["target", "level", "xoffset", "width", "format", "type", "*pixels"])
             ["GLenum target", "GLint level", "GLint xoffset", "GLsizei width", "GLenum format", "GLenum type", "GLvoid *pixels"])
            or (None, None, None, None) if parsing failed.

    note the const is gone from "const GLvoid *pixels"
    """

    l = line.strip().split()

    assert l[0] == "GLAPI"

    if l[2] == "GLAPIENTRY":
        # GLAPI void GLAPIENTRY glGetPolygonStipple (GLubyte *mask);
        return_type = l[1]
        function_name = l[3].split("(")[0]
    else:
        # special cases. sorry, i don't have time to write a parser for every possible declaration.
        # GLAPI const GLubyte * GLAPIENTRY glGetString (GLenum name);
        if line.strip().startswith("GLAPI const GLubyte * GLAPIENTRY"):
            return_type = "GLubyte*"
            function_name = l[5].split("(")[0]
        else:
            raise Exception("don't know how to get the return type")

    assert function_name

    # cut out "GLfloat x, GLfloat y, GLfloat z" from the "line"
    ctypeparams = line[line.find("(") + 1 : line.rfind(")")]
    ctypeparamslist = ctypeparams.split(",")

    # filter out single "void" param
    if len(ctypeparamslist) == 1 and ctypeparamslist[0].strip() == "void":
        ctypeparams = ""
        ctypeparamslist = []

    pyrexparamslist = []
    pythonparamslist = []
    for paramtxt in ctypeparamslist:
        # remove "const"
        pyrexparamslist.append(" ".join([part for part in paramtxt.split() if part != "const"]))
        pythonparamslist.append(paramtxt.split()[-1])

    return return_type, function_name, pythonparamslist, pyrexparamslist


def get_define_line(line, linenum):
    """
    input : line from gl.h        : #define GL_AMBIENT_AND_DIFFUSE 0x1602
    outupt: pyrex-compatible line : GL_AMBIENT_AND_DIFFUSE = 0x1602
            or None if conversion failed
    """

    l = line.strip().split()

    if l[0] == "#define":

        if len(l) != 3:
            print("WARNING: get_define_line : can't parse line %i: %s" % (linenum, repr(line)))
            return

        try:

            if l[2].startswith("0x") or l[2].startswith("0X"): val = int(l[2], 16)
            else: val = int(l[2])

            # return "GL_AMBIENT_AND_DIFFUSE = 0x1602"
            #return "%s = %s" % (l[1], l[2])
            return "int %s" % (l[1])
            #return "cdef int %s\n%s = %s" % (l[1], l[1], l[2])

        except ValueError:

            print("WARNING: get_define_line : skipping line %i: %s" % (linenum, repr(line)))


def get_function_line(line, linenum):
    """
    input : line from gl.h        : GLAPI void GLAPIENTRY glAccum (GLenum op, GLfloat value);
    outupt: pyrex-compatible line : cdef void glAccum (GLenum op, GLfloat value);
            or None if conversion failed
    """

    l = line.strip().split()

    if l[0] == "GLAPI":

        return_type, function_name, pythonparamslist, pyrexparamslist = get_pyrex_parameters(line)

        # return "cdef void glAccum (GLenum op, GLfloat value)"
        return "cdef %s %s (%s)" % (return_type, function_name, ", ".join(pyrexparamslist))


# in: cdef_modulename
#     use_opengl_error_checking
def get_pyrex_function(line, linenum):
    """
    input : line from gl.h            : GLAPI void GLAPIENTRY glVertex3f (GLfloat x, GLfloat y, GLfloat z);
    outupt: pyrex-compatible function : def glVertex3f(float x, float y, float z):
                                            c_copengl.glVertex3f(x, y, z)
    or None if conversion failed
    """

    l = line.strip().split()

    if l[0] == "GLAPI":

        return_type, function_name, pythonparamslist, pyrexparamslist = get_pyrex_parameters(line)

        if function_name in handmadewrappers_functionlist: return

        if return_type.find("*") != -1:
            print("WARNING: get_pyrex_function : pointer in return value. skipping line %i: %s" % (linenum, repr(line)))
            return

        for param in pythonparamslist:
            if param.startswith("*"):
                print("WARNING: get_pyrex_function : ptr in param. generating dummy fn. %i: %s" % (linenum, function_name))
                #print "WARNING: get_pyrex_function : pointers in parameters not supported.. skipping line %i: %s" % (linenum, repr(line))

                # generate dummy function

                # modify pyrexparamslist so entries like "GLuint *textures" will become "textures"
                plist = []
                for p in pyrexparamslist:
                    i = p.rfind("*")
                    if i != -1: plist.append(p[i + 1:])
                    else: plist.append(p)

                t  = "def " + function_name + "(" + ", ".join(plist) + "):\n"
                t += "    raise GLError('wrapper not implemented')\n"
                return t

        if return_type == "void":
            t  = "def " + function_name + "(" + ", ".join(pyrexparamslist) + "):\n"
            t += "    " + cdef_modulename + "." + function_name + "(" + ", ".join(pythonparamslist) + ")\n"
            if use_opengl_error_checking:
                t += "    if _GET_GL_ERROR: _CheckError()\n"
        else:
            if use_opengl_error_checking:
                t  = "def " + function_name + "(" + ", ".join(pyrexparamslist) + "):\n"
                t += "    cdef " + return_type + " retval\n"
                t += "    retval = " + cdef_modulename + "." + function_name + "(" + ", ".join(pythonparamslist) + ")\n"
                t += "    if _ERROR_CHECKING: _CheckError()\n"
                t += "    return retval\n"
            else:
                t  = "def " + function_name + "(" + ", ".join(pyrexparamslist) + "):\n"
                t += "    return " + cdef_modulename + "." + function_name + "(" + ", ".join(pythonparamslist) + ")\n"

        return t


#
# fill handmadewrappers_functionlist
#


if handmadewrappers_filename:
    for line in open(handmadewrappers_filename, "rb"):
        if line.startswith(b"def "):
            l = line.split()[1]
            function_name = l[:l.find(b"(")]
            handmadewrappers_functionlist.append(function_name)


#
# scan the opengl header file and parse defines and functions..
#


defines = []
functions = []
pyrexfunctions = []
for i, line in enumerate(open(IN_FILE).readlines()):

    l = line.strip().split()
    if not l: continue

    linenum = i + 1

    try:
        if l[0] == "#define":
            t = get_define_line(line, linenum)
            if t: defines.append(t)
        elif l[0] == "GLAPI":
            t = get_function_line(line, linenum)
            if t: functions.append(t)
            t = get_pyrex_function(line, linenum)
            if t: pyrexfunctions.append(t)
    except:
        print("ERROR: line %i: %s" % (linenum, repr(line)))
        #traceback.print_exc()
        raise

#
# generate pyrexopengl.pyx
# opengl constants and function definitions
#

f = open(pyrex_filename, "wb+")
f.write(b"""
#
# this is an autogenerated file (generate_pyx.py)
#
""")

#for d in defines: f.write(d + "\n")
f.write(b"""cdef extern from "include_gl.h":\n\n""")
for d in defines: f.write(("    " + d + "\n").encode('utf-8'))


f.write(b"""

cdef extern from "stdlib.h":
    void* malloc (int size)
    void  free(void* ptr)

cimport c_copengl
from c_copengl cimport GLenum, GLboolean, GLbitfield, GLvoid, GLbyte, GLshort, GLint, GLubyte, GLushort, GLuint, GLsizei, GLfloat, GLclampf, GLdouble, GLclampd, GLchar


#############################################################################
# opengl functions visible to python
#


""")

for pf in pyrexfunctions: f.write((pf + "\n").encode('utf-8'))

f.write(b"""
#############################################################################
# handwrapped opengl functions visible to python
#

""")


if handmadewrappers_filename:
    f.writelines(open(handmadewrappers_filename, "rb").readlines())

f.write(b"""

#############################################################################
# custom functions visible to python
#


def PyrexGlCheckErrors(b):
    global _ERROR_CHECKING, _GET_GL_ERROR
    if b: _ERROR_CHECKING = 1
    else: _ERROR_CHECKING, _GET_GL_ERROR = 0


#############################################################################
# error-checking code
#


cdef int _ERROR_CHECKING
cdef int _GET_GL_ERROR

_ERROR_CHECKING = 1
_GET_GL_ERROR = 0

class GLError(Exception):
    error_txt = {GL_INVALID_ENUM: "GL_INVALID_ENUM", GL_INVALID_VALUE: "GL_INVALID_VALUE", GL_INVALID_OPERATION: "GL_INVALID_OPERATION", GL_STACK_OVERFLOW: "GL_STACK_OVERFLOW", GL_STACK_UNDERFLOW: "GL_STACK_UNDERFLOW", GL_OUT_OF_MEMORY: "GL_OUT_OF_MEMORY"}
    def __init__(self, err_code):
        self.message = self.error_txt[err_code]
    def __str__(self):
        return self.message

cdef _CheckError():
    cdef GLenum e
    e = c_copengl.glGetError()
    if e == GL_NO_ERROR: return
    raise GLError(e)

""")

#
# generate c_copengl.pxd
# declarations in pyrex compatible form
#

f = open(cdef_modulename + ".pxd", "wb+")

# TODO: typedef is different for apple. glew.h says..

f.write(b"""
#
# this is an autogenerated file (generate_pyx.py)
#
""")

f.write(b"""cdef extern from "include_gl.h":

    ctypedef unsigned int   GLenum
    ctypedef unsigned char  GLboolean
    ctypedef unsigned int   GLbitfield
    ctypedef void           GLvoid
    ctypedef signed char    GLbyte
    ctypedef short          GLshort
    ctypedef int            GLint
    ctypedef unsigned char  GLubyte
    ctypedef unsigned short GLushort
    ctypedef unsigned int   GLuint
    ctypedef int            GLsizei
    ctypedef float          GLfloat
    ctypedef float          GLclampf
    ctypedef double         GLdouble
    ctypedef double         GLclampd
    ctypedef char           GLchar
    ctypedef unsigned int   GLhandleARB

""")

for fn in functions: f.write(("    " + fn + "\n").encode('utf-8'))
f.write(b"\n")

print()
print("generated files '%s.pxd' and '%s'." % (cdef_modulename, pyrex_filename))
